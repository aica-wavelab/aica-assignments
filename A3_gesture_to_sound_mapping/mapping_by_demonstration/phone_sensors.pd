#N canvas 827 239 527 327 12;
#X obj 219 139 oscparse;
#X listbox 219 179 34 0 0 0 - - - 0;
#X obj 219 95 netreceive -u -b;
#X msg 219 59 listen 8000;
#X obj 219 19 loadbang;
#X obj 299 19 bng 25 250 50 0 empty empty empty 17 7 0 10 #191919 #e1e1e1 #e1e1e1;
#X text 19 18 Bang when the patch is open;
#X text 339 18 Manual bang;
#X text 319 58 Choose network port to listen to;
#X text 19 138 Parse raw OSC messages;
#X text 19 178 Overview of messages received;
#X obj 219 219 list trim;
#X text 386 286 You can select any incomming sensors' signals, f 25;
#X obj 219 312 unpack f f f, f 14;
#X obj 219 473 multi.vsl 200 127 0 127 8 empty empty empty 255 255 255 220 220 220 0 0 0 0 0 0 holder holder 64.2366 64.7683 63.5141 0 0 0 0 0;
#X obj 219 436 pack f f f;
#X obj 219 353 expr ($f1+1)*127/2, f 6;
#X obj 258 353 expr ($f1+1)*127/2, f 6;
#X obj 297 353 expr ($f1+1)*127/2, f 6;
#X text 339 688 You can receive the signals sent in this object across patches using [receive keyword];
#X obj 219 697 send input_signal;
#X obj 219 617 route 0 1 2;
#X obj 219 657 pack f f f;
#X text 386 246 Route for Sensors2OSC https://sensors2.org/osc/, f 25;
#X obj 219 272 route gamerotationvector;
#X text 565 271 See https://developer.android.com/guide/topics/sensors/sensors_position#sensors-pos-gamerot;
#X text 339 352 /!\ These data stream have different ranges for each OS/device \; /!\ If noisy signals ->Your solution is a low-pass filter \, search how to implement it in Pd, f 43;
#X connect 0 0 1 0;
#X connect 1 0 11 0;
#X connect 2 0 0 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 11 0 24 0;
#X connect 13 0 16 0;
#X connect 13 1 17 0;
#X connect 13 2 18 0;
#X connect 14 0 21 0;
#X connect 15 0 14 0;
#X connect 16 0 15 0;
#X connect 17 0 15 1;
#X connect 18 0 15 2;
#X connect 21 0 22 0;
#X connect 21 1 22 1;
#X connect 21 2 22 2;
#X connect 22 0 20 0;
#X connect 24 0 13 0;
